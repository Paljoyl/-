#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>

#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10
#define ARGC_CNT 3
#define INIT_SIZE 200

typedef struct {
	char data;
	int weight;//权值
	int parent, lchild, rchild;
} HTNode, * HufumanTree;//树节点

//赫夫曼编码，建立具有2n-1个单元的数组，其中n个单元用于保存初始结点，n - 1个结点用于表示内部结点
typedef char** HufumanCode;

typedef struct {
	HTNode* data; 	//栈元素数组 
	int top;        //栈顶索引 
	int stacksize;  //当前已分配的存储容量  
}Stack;//栈 

//初始化栈
bool InitStack(Stack* S) {
	S->data = (HTNode*)malloc(STACK_INIT_SIZE * sizeof(HTNode));
	if (!S->data) {
		return false;
	}//栈不存在  
	S->top = -1;//栈空标志 
	S->stacksize = STACK_INIT_SIZE;
	return true;
}

//栈判空
int StackEmpty(Stack S) {
	if (S.top == -1) {
		return 1;
	}
	else return 0;
}

bool NodeExist(HTNode T) {
	if (T.weight == 0) {
		return 0;
	}
	else return 1;
}

bool Push(Stack* S, HTNode node) {
	//栈满，追加存储空间 
	if (S->top + 1 == S->stacksize) {
		HTNode* newbase1 = (HTNode*)realloc(S->data, (S->stacksize + STACKINCREMENT) * sizeof(HTNode));
		if (!newbase1) {
			return false;
		}	//开辟空间失败  
		S->data = newbase1;
		S->stacksize += STACKINCREMENT;
	}
	//插入元素 
	S->data[++S->top] = node;
	return true;
}

bool Pop(Stack* S, HTNode* node) {
	if (S->top == -1) {
		return false;
	}//栈空  
	*node = S->data[S->top--];
	return true;
}

bool StackDestroy(Stack* S) {
	free(S->data);
	return true;
}

bool Select(HufumanTree HT, int x, int* s1, int* s2) {
	*s1 = -1;
	*s2 = -1;
	for (int i = 1;i <= x;i++) {
		if (HT[i].parent == 0) {
			if (*s1 == -1 || HT[i].weight < HT[*s1].weight || (HT[i].weight == HT[*s1].weight && HT[i].data < HT[*s1].data && HT[i].data != NULL)) {
				*s2 = *s1;
				*s1 = i;
			}
			else if (*s2 == -1 || HT[i].weight < HT[*s2].weight || (HT[i].weight == HT[*s2].weight && HT[i].data < HT[*s2].data && HT[i].data != NULL)) {
				*s2 = i; // 更新s2为当前第二小节点
			}
		}
	}
	return true;
}

//求节点的度
int degree(HTNode T) {
	int Degree = 0;
	if (T.lchild) {
		Degree++;
	}
	if (T.rchild) {
		Degree++;
	}
	return Degree;
}

//求节点所在的层数
int level(HTNode* T, int index) {
	int Level = 0;
	while (index) {
		Level++;
		index = T[index].parent; // 移动到父节点
	}
	return Level; // 返回层数
}


//先序遍历的非递归算法
bool PreOrder(HTNode* T, int size) {
	Stack S;
	InitStack(&S);
	int index = size;//从根节点开始
	while (index  || (!StackEmpty(S))) {
		if (index) {
			if (T[index].data == NULL)printf("%d", 0);
			printf("%c,%d,%d,%d\n", T[index].data, T[index].weight, degree(T[index]), level(T, index)); // 访问节点
			Push(&S, T[index]);  // 当前节点入栈
			index = T[index].lchild; // 移至左子树
		}
		else {
			HTNode e;
			Pop(&S, &e);  // 取出栈顶节点
			index = e.rchild; // 移至右子树
		}
	}
	StackDestroy(&S);
	return true;
}

bool  hufmanCode(HufumanTree HT, HufumanCode& HC, int n) {
	int i;
	HC = (HufumanCode)malloc((n + 1) * sizeof(char*));
	//逆向求每个字符的赫夫曼编码
	char* cd = (char*)malloc(n * sizeof(char));//从0开始，分配求编码的工作空间
	if (cd == NULL) {
		printf("ERROR_02");
		return false; // 如果内存分配失败，则退出程序
	}
	cd[n - 1] = '\0';
	//逐字符求
	for (i = 1; i <= n; ++i) {
		int start = n - 1;//编码结束符位置
		int f;
		for (int c = i, f = HT[i].parent; f != 0; c = f, f = HT[f].parent) {
			if (HT[f].lchild == c)   cd[--start] = '0';//左子树为0，右子树为1
			else  cd[--start] = '1';
		}
		HC[i] = (char*)malloc((n - start) * sizeof(char));
		if (HC[i] == NULL) {
			printf("ERROR_02");
			return false; // 如果内存分配失败，则退出程序
		}
		for (f = 0; f < n - start - 1; f++) {
			HC[i][f] = cd[start + f];
		}
		// 在字符串末尾添加'\0'作为结束符
		HC[i][n - start - 1] = '\0';
	}
	free(cd);
	return true;
}

int Number(char* str) {
	int i, j, q = 0, n = 1;
	for (i = 1;*(str + i) != '\0';i++) {
		for (j = 0;j < i;j++) {
			if (*(str + i) == *(str + j)) {
				q++;
			}
		}
		if (q == 0) {
			n++;
		}
		q = 0;
	}
	if (i < 20) {
		return -1;
	}
	return n;
}

bool CreatData(int n,int *w,char* Data ,char* str) {
	Data[0] = *str;
	Data[n] = '\0';
	int i,j = 1;int k;
	for (i = 1;*(str + i) != '\0';i++) {
		for (k = 0;*(str + k) != *(str + i);k++);
		if (k == i) {
			Data[j] = *(str + i);
			j++;
		}
	}
	//求权值
	for (j = 0;j < n;j++) {
		w[j] = 0;
		for (i = 0;*(str + i) != '\0';i++) {
			if (Data[j] == *(str + i)) {
				w[j]++;
			}
		}
	}
	return true;
}

int Test(int m,char* num, HufumanTree HT) {
	int index = 0, i, j;
	j = m;
	for (i = 0;i < strlen(num) + 1; i++) {
		if (*(num + i) == '0' && HT[j].lchild != NULL) {
			j = HT[j].lchild;
		}
		else if (*(num + i) == '1' && HT[j].rchild != NULL) {
			j = HT[j].rchild;
		}
		else if (HT[j].data != 0) {
			i--;
			j = m;
			index++;
		}
	}
	if (index == 0) {
		return -1;
	}
}

bool PrintfCode(HufumanTree HT, HufumanCode HC,char* str) {
	int i,j;
	for (i = 0;*(str + i) != '\0';i++) {
		for (j = 1;HT[j].data != *(str + i);j++);
		printf("%s", HC[j]);
	}
	return true;
}

bool DeCode(HufumanTree HT,char* num, int m) {
	int i, j;
	j = m;
	for (i = 0;i < strlen(num)+1; i++) {
		if (*(num + i) == '0' && HT[j].lchild != NULL) {
			j = HT[j].lchild;
		}
		else if (*(num + i) == '1' && HT[j].rchild != NULL) {
			j = HT[j].rchild;
		}
		else {
			printf("%c", HT[j].data);
			i--;
			j = m;
			if (i >= strlen(num)-1)return true;
		}
	}
	return true;
}

bool HufmanDestroy(HufumanTree HT) {
	free(HT);
	return true;
}

int main(int argc, char* argv[]) {
	//根据程序需要判断参数数量是否正确
	if (argc != ARGC_CNT) {
		printf("%s","ERROR_01");
		return -1;
	}
	int i, n;
	n = Number(argv[1]);//求节点数
	if (n == -1) {
		printf("%s", "ERROR_02");
		return -1;
	}

	char* Data = (char*)malloc((n + 1) * sizeof(char));
	if (Data == NULL) {
		printf("%s\n","ERROR_02");
		return 0; // 如果内存分配失败，则退出程序
	}
	int* w = (int*)malloc((n + 1) * sizeof(int));
	if (w == NULL) {
		printf("%s", "ERROR_02");
		return 0; // 如果内存分配失败，则退出程序
	}
	CreatData(n, w, Data, argv[1]); //求节点信息

	//构造化赫夫曼树
	int m = 2 * n - 1;//总节点树数
	HufumanTree HT = (HufumanTree)malloc((m + 1) * sizeof(HTNode)); // 不用0号单元
	HufumanTree p;
	int s1, s2;
	for (int i = 1; i <= m; ++i) {// 初始化赫夫曼树
		HT[i].data = 0;
		HT[i].weight = 0;
		HT[i].parent = HT[i].lchild = HT[i].rchild = 0;
	}
	for (int i = 1; i <= n; ++i) {//赋值
		HT[i].data = Data[i - 1];
		HT[i].weight = w[i - 1];
	}
	for (i = n + 1; i <= m; ++i) {
		Select(HT, i - 1, &s1, &s2); //选择根结点权值最小的2个二叉树
		HT[s1].parent = i; HT[s2].parent = i;
		HT[i].lchild = s1; HT[i].rchild = s2;
		HT[i].weight = HT[s1].weight + HT[s2].weight;
	}// 构造赫夫曼树
	PreOrder(HT, m);//遍历求节点、节点的权值、节点的度和节点所在的层数；
	HufumanCode HC;
	hufmanCode(HT, HC, n);
	if (HC[1][0] == '\0') {
		printf("%s", "ERROR_03");
		return 0;
	}
	if (Test(m, argv[2], HT) == -1) {
		printf("%s", "ERROR_03");
		return -1;
	}//检查是否可译码
	PrintfCode(HT, HC,argv[1]);//输出编码结果
	printf("%c", ' ');
	DeCode(HT,argv[2],m);
	HufmanDestroy(HT);
	free(HC);
	return 1;
}
